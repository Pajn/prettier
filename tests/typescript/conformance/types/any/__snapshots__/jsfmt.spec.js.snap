// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`anyAsConstructor.ts 1`] = `
"// any is considered an untyped function call
// can be called except with type arguments which is an error

var x: any;
var a = new x();
var b = new x('hello');
var c = new x(x);

// grammar allows this for constructors
var d = new x<any>(x); // no error
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// any is considered an untyped function call
// can be called except with type arguments which is an error

var x: any;
var a = new x();
var b = new x(\\"hello\\");
var c = new x(x);

// grammar allows this for constructors
var d = new x<any>(x); // no error
"
`;

exports[`anyAsFunctionCall.ts 1`] = `
"// any is considered an untyped function call
// can be called except with type arguments which is an error

var x: any;
var a = x();
var b = x('hello');
var c = x(x);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// any is considered an untyped function call
// can be called except with type arguments which is an error

var x: any;
var a = x();
var b = x(\\"hello\\");
var c = x(x);
"
`;

exports[`anyAsGenericFunctionCall.ts 1`] = `
"// any is considered an untyped function call
// can be called except with type arguments which is an error

var x: any;
var a = x<number>();
var b = x<string>('hello');
var c = x<object>('hello');

class C { foo: string; }
var c = x<C>(x);
var d = x<any>(x);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// any is considered an untyped function call
// can be called except with type arguments which is an error

var x: any;
var a = x<number>();
var b = x<string>(\\"hello\\");
var c = x<object>(\\"hello\\");

class C {
  foo: string;
}
var c = x<C>(x);
var d = x<any>(x);
"
`;

exports[`anyPropertyAccess.ts 1`] = `
"var x: any;
var a = x.foo;
var b = x['foo'];
var c = x['fn']();
var d = x.bar.baz;
var e = x[0].foo;
var f = x['0'].bar;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
var x: any;
var a = x.foo;
var b = x[\\"foo\\"];
var c = x[\\"fn\\"]();
var d = x.bar.baz;
var e = x[0].foo;
var f = x[\\"0\\"].bar;
"
`;

exports[`narrowFromAnyWithTypePredicate.ts 1`] = `
"declare var x: any;
declare function isFunction(x): x is Function;
declare function isObject(x): x is Object;
declare function isAnything(x): x is {};
declare function isError(x): x is Error;
declare function isDate(x): x is Date;


if (isFunction(x)) { // 'any' is not narrowed when target type is 'Function'
    x();
    x(1, 2, 3);
    x(\\"hello!\\");
    x.prop;
}

if (isObject(x)) { // 'any' is not narrowed when target type is 'Object'
    x.method();
    x();
}

if (isAnything(x)) { // 'any' is narrowed to types other than 'Function'/'Object' (including {})
    x.method();
    x();
}

if (isError(x)) { 
    x.message;
    x.mesage;
}

if (isDate(x)) {
    x.getDate();
    x.getHuors();
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
declare var x: any;
declare function isFunction(x): x is Function 
declare function isObject(x): x is Object 
declare function isAnything(x): x is {} 
declare function isError(x): x is Error 
declare function isDate(x): x is Date 

if (isFunction(x)) {
  // 'any' is not narrowed when target type is 'Function'
  x();
  x(1, 2, 3);
  x(\\"hello!\\");
  x.prop;
}

if (isObject(x)) {
  // 'any' is not narrowed when target type is 'Object'
  x.method();
  x();
}

if (isAnything(x)) {
  // 'any' is narrowed to types other than 'Function'/'Object' (including {})
  x.method();
  x();
}

if (isError(x)) {
  x.message;
  x.mesage;
}

if (isDate(x)) {
  x.getDate();
  x.getHuors();
}
"
`;
