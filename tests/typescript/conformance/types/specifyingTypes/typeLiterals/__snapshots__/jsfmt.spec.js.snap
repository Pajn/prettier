// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrayLiteral.ts 1`] = `
"// valid uses of array literals

var x = [];
var x = new Array(1);

var y = [1];
var y = [1, 2];
var y = new Array<number>();

var x2: number[] = [];
var x2: number[] = new Array(1);

var y2: number[] = [1];
var y2: number[] = [1, 2];
var y2: number[] = new Array<number>();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// valid uses of array literals

var x = [];
var x = new Array(1);

var y = [1];
var y = [1, 2];
var y = new Array<number>();

var x2: number[] = [];
var x2: number[] = new Array(1);

var y2: number[] = [1];
var y2: number[] = [1, 2];
var y2: number[] = new Array<number>();
"
`;

exports[`arrayOfFunctionTypes3.ts 1`] = `
"// valid uses of arrays of function types

var x = [() => 1, () => { }];
var r2 = x[0]();

class C {
    foo: string;
}
var y = [C, C];
var r3 = new y[0]();

var a: { (x: number): number; (x: string): string; };
var b: { (x: number): number; (x: string): string; };
var c: { (x: number): number; (x: any): any; };
var z = [a, b, c];
var r4 = z[0];
var r5 = r4(''); // any not string
var r5b = r4(1);

var a2: { <T>(x: T): number; (x: string): string;};
var b2: { <T>(x: T): number; (x: string): string; };
var c2: { (x: number): number; <T>(x: T): any; };

var z2 = [a2, b2, c2];
var r6 = z2[0];
var r7 = r6(''); // any not string
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// valid uses of arrays of function types

var x = [() => 1, () => {}];
var r2 = x[0]();

class C {
  foo: string;
}
var y = [C, C];
var r3 = new y[0]();

var a: { (x: number): number, (x: string): string };
var b: { (x: number): number, (x: string): string };
var c: { (x: number): number, (x: any): any };
var z = [a, b, c];
var r4 = z[0];
var r5 = r4(\\"\\"); // any not string
var r5b = r4(1);

var a2: { <T>(x: T): number, (x: string): string };
var b2: { <T>(x: T): number, (x: string): string };
var c2: { (x: number): number, <T>(x: T): any };

var z2 = [a2, b2, c2];
var r6 = z2[0];
var r7 = r6(\\"\\"); // any not string
"
`;

exports[`arrayTypeOfFunctionTypes.ts 1`] = `
"// valid uses of arrays of function types

var x: () => string[];
var r = x[1];
var r2 = r();
var r2b = new r();

var x2: { (): string }[];
var r3 = x2[1];
var r4 = r3();
var r4b = new r3(); // error

var x3: Array<() => string>;
var r5 = x2[1];
var r6 = r5();
var r6b = new r5(); // error
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// valid uses of arrays of function types

var x: () => string[];
var r = x[1];
var r2 = r();
var r2b = new r();

var x2: { (): string }[];
var r3 = x2[1];
var r4 = r3();
var r4b = new r3(); // error

var x3: Array<() => string>;
var r5 = x2[1];
var r6 = r5();
var r6b = new r5(); // error
"
`;

exports[`arrayTypeOfFunctionTypes2.ts 1`] = `
"// valid uses of arrays of function types

var x: new () => string[];
var r = x[1];
var r2 = new r();
var r2b = r();

var x2: { new(): string }[];
var r3 = x[1];
var r4 = new r3();
var r4b = new r3();

var x3: Array<new () => string>;
var r5 = x2[1];
var r6 = new r5();
var r6b = r5();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// valid uses of arrays of function types

var x: new () => string[];
var r = x[1];
var r2 = new r();
var r2b = r();

var x2: { new (): string }[];
var r3 = x[1];
var r4 = new r3();
var r4b = new r3();

var x3: Array<new () => string>;
var r5 = x2[1];
var r6 = new r5();
var r6b = r5();
"
`;

exports[`functionLiteralForOverloads.ts 1`] = `
"// basic uses of function literals with overloads

var f: {
    (x: string): string;
    (x: number): number;
} = (x) => x;

var f2: {
    <T>(x: string): string;
    <T>(x: number): number;
} = (x) => x;

var f3: {
    <T>(x: T): string;
    <T>(x: T): number;
} = (x) => x;

var f4: {
    <T>(x: string): T;
    <T>(x: number): T;
} = (x) => x;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// basic uses of function literals with overloads

var f: {
  (x: string): string,
  (x: number): number
} = x => x;

var f2: {
  <T>(x: string): string,
  <T>(x: number): number
} = x => x;

var f3: {
  <T>(x: T): string,
  <T>(x: T): number
} = x => x;

var f4: {
  <T>(x: string): T,
  <T>(x: number): T
} = x => x;
"
`;

exports[`functionLiteralForOverloads2.ts 1`] = `
"// basic uses of function literals with constructor overloads

class C {
    constructor(x: string);
    constructor(x: number);
    constructor(x) { }
}

class D<T> {
    constructor(x: string);
    constructor(x: number);
    constructor(x) { }
}

var f: {
    new(x: string): C;
    new(x: number): C;
} = C;

var f2: {
    new<T>(x: string): C;
    new<T>(x: number): C;
} = C;

var f3: {
    new<T>(x: string): D<T>;
    new<T>(x: number): D<T>;
} = D;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// basic uses of function literals with constructor overloads

class C {
  constructor(x: string) 
  constructor(x: number) 
  constructor(x) {}
}

class D<T> {
  constructor(x: string) 
  constructor(x: number) 
  constructor(x) {}
}

var f: {
  new (x: string): C,
  new (x: number): C
} = C;

var f2: {
  new <T>(x: string): C,
  new <T>(x: number): C
} = C;

var f3: {
  new <T>(x: string): D<T>,
  new <T>(x: number): D<T>
} = D;
"
`;

exports[`parenthesizedTypes.ts 1`] = `
"var a: string;
var a: (string);
var a: ((string) | string | (((string))));
var a: ((((((((((((((((((((((((((((((((((((((((string))))))))))))))))))))))))))))))))))))))));

var b: (x: string) => string;
var b: ((x: (string)) => (string));

var c: string[] | number[];
var c: (string)[] | (number)[];
var c: ((string)[]) | ((number)[]);

var d: (((x: string) => string) | ((x: number) => number))[];
var d: ({ (x: string): string } | { (x: number): number })[];
var d: Array<((x: string) => string) | ((x: number) => number)>;
var d: Array<{ (x: string): string } | { (x: number): number }>;
var d: (Array<{ (x: string): string } | { (x: number): number }>);

var e: typeof a[];
var e: (typeof a)[];

var f: (string) => string;
var f: (string: any) => string;

var g: [string, string];
var g: [(string), string];
var g: [(string), (((typeof a)))];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
var a: string;
var a: (string);
var a: ((string) | string | (((string))));
var a: ((((((((((((((((((((((((((((((((((((((((string))))))))))))))))))))))))))))))))))))))));

var b: (x: string) => string;
var b: ((x: (string)) => (string));

var c: string[] | number[];
var c: (string)[] | (number)[];
var c: ((string)[]) | ((number)[]);

var d: (((x: string) => string) | ((x: number) => number))[];
var d: ({ (x: string): string } | { (x: number): number })[];
var d: Array<((x: string) => string) | ((x: number) => number)>;
var d: Array<{ (x: string): string } | { (x: number): number }>;
var d: (Array<{ (x: string): string } | { (x: number): number }>);

var e: typeof a[];
var e: (typeof a)[];

var f: (string) => string;
var f: (string: any) => string;

var g: [string, string];
var g: [(string), string];
var g: [(string), (((typeof a)))];
"
`;

exports[`unionTypeLiterals.ts 1`] = `
"// basic valid forms of union literals

var simpleUnion: string | number;
var unionOfUnion: string | number | boolean;

var arrayOfUnions: (string | number)[];
var arrayOfUnions: Array<string | number>;

var unionOfFunctionType: (() => string) | (() => number);
var unionOfFunctionType: { (): string } | { (): number };
var unionOfFunctionType: () => string | number;

var unionOfConstructorType: (new () => string) | (new () => number);
var unionOfConstructorType: { new (): string } | { new (): number };
var unionOfConstructorType: new () => string | number;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// basic valid forms of union literals

var simpleUnion: string | number;
var unionOfUnion: string | number | boolean;

var arrayOfUnions: (string | number)[];
var arrayOfUnions: Array<string | number>;

var unionOfFunctionType: (() => string) | (() => number);
var unionOfFunctionType: { (): string } | { (): number };
var unionOfFunctionType: () => string | number;

var unionOfConstructorType: (new () => string) | (new () => number);
var unionOfConstructorType: { new (): string } | { new (): number };
var unionOfConstructorType: new () => string | number;
"
`;
