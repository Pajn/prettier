// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`numericStringNamedPropertyEquivalence.ts 1`] = `
"// Each of these types has an error in it. 
// String named and numeric named properties conflict if they would be equivalent after ToNumber on the property name.
class C {
    \\"1\\": number;
    \\"1.0\\": number; // not a duplicate
    1.0: number;
}

interface I {
    \\"1\\": number;
    \\"1.\\": number; // not a duplicate
    1: number;
}

var a: {
    \\"1\\": number;
    1.0: string;
}

var b = {
    \\"0\\": '',
    0: ''
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Each of these types has an error in it.
// String named and numeric named properties conflict if they would be equivalent after ToNumber on the property name.
class C {
  \\"1\\": number;
  \\"1.0\\": number; // not a duplicate
  1.0: number;
}

interface I {
  \\"1\\": number,
  \\"1.\\": number, // not a duplicate
  1: number
}

var a: {
  \\"1\\": number,
  1.0: string
};

var b = {
  \\"0\\": \\"\\",
  0: \\"\\"
};
"
`;

exports[`stringNamedPropertyAccess.ts 1`] = `
"class C {
    \\"a b\\": number;
    static \\"c d\\": number;
}
var c: C;
var r1 = c[\\"a b\\"];
var r1b = C['c d'];

interface I {
    \\"a b\\": number;
}
var i: I;
var r2 = i[\\"a b\\"];

var a: {
    \\"a b\\": number;
}
var r3 = a[\\"a b\\"];

var b = {
    \\"a b\\": 1
}
var r4 = b[\\"a b\\"];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class C {
  \\"a b\\": number;
  static \\"c d\\": number;
}
var c: C;
var r1 = c[\\"a b\\"];
var r1b = C[\\"c d\\"];

interface I {
  \\"a b\\": number
}
var i: I;
var r2 = i[\\"a b\\"];

var a: {
  \\"a b\\": number
};
var r3 = a[\\"a b\\"];

var b = {
  \\"a b\\": 1
};
var r4 = b[\\"a b\\"];
"
`;
